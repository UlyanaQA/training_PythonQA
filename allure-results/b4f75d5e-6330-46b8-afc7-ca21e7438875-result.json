{"name": "test_add_group[None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J]", "status": "failed", "statusDetails": {"message": "AssertionError: assert [81:::, 82:na...@, 86:::, ...] == [81:::, 82:na...@, 86:::, ...]\n  Left contains one more item: None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J\n  Use -v to get more diff", "trace": "app = <fixture.application.Application object at 0x00000216C1CD6D10>\ndb = <fixture.db.DbFixture object at 0x00000216C1CD6E60>\njson_groups = None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J, check_ui = False\n\n    def test_add_group(app, db, json_groups, check_ui):\n        group = json_groups\n        with allure.step('Given a group list'):\n            old_groups = db.get_group_list()\n        with allure.step('When I add a group %s to the list' % group):\n            app.group.create(group)\n        with allure.step('Then the new group list is equal to the old group list with the added group'):\n            new_groups = db.get_group_list()\n            old_groups.append(group)\n>           assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE           assert [81:::, 82:na...@, 86:::, ...] == [81:::, 82:na...@, 86:::, ...]\nE             Left contains one more item: None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J\nE             Use -v to get more diff\n\ntest\\test_add_group.py:16: AssertionError"}, "steps": [{"name": "Given a group list", "status": "passed", "start": 1681772587641, "stop": 1681772587642}, {"name": "When I add a group None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J to the list", "status": "passed", "start": 1681772587642, "stop": 1681772588792}, {"name": "Then the new group list is equal to the old group list with the added group", "status": "failed", "statusDetails": {"message": "AssertionError: assert [81:::, 82:na...@, 86:::, ...] == [81:::, 82:na...@, 86:::, ...]\n  Left contains one more item: None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J\n  Use -v to get more diff\n", "trace": "  File \"C:\\Users\\Ulyana\\PycharmProjects\\training_PythonQA\\test\\test_add_group.py\", line 16, in test_add_group\n    assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\n"}, "start": 1681772588792, "stop": 1681772588817}], "parameters": [{"name": "json_groups", "value": "None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J"}], "start": 1681772587640, "stop": 1681772588818, "uuid": "d0f788ba-129f-4e01-abf4-2d0e4d682541", "historyId": "389c670c2e0fd6aa34c956b01d0ab86f", "testCaseId": "8e9b1d07ef6cdb67de3c4a3d82e10652", "fullName": "test.test_add_group#test_add_group", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_add_group"}, {"name": "host", "value": "LAPTOP-Q68PQPK9"}, {"name": "thread", "value": "356688-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_add_group"}]}