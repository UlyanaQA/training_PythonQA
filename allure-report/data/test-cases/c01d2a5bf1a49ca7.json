{"uid":"c01d2a5bf1a49ca7","name":"test_add_group[None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J]","fullName":"test.test_add_group#test_add_group","historyId":"389c670c2e0fd6aa34c956b01d0ab86f","time":{"start":1681772587640,"stop":1681772588818,"duration":1178},"status":"failed","statusMessage":"AssertionError: assert [81:::, 82:na...@, 86:::, ...] == [81:::, 82:na...@, 86:::, ...]\n  Left contains one more item: None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J\n  Use -v to get more diff","statusTrace":"app = <fixture.application.Application object at 0x00000216C1CD6D10>\ndb = <fixture.db.DbFixture object at 0x00000216C1CD6E60>\njson_groups = None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J, check_ui = False\n\n    def test_add_group(app, db, json_groups, check_ui):\n        group = json_groups\n        with allure.step('Given a group list'):\n            old_groups = db.get_group_list()\n        with allure.step('When I add a group %s to the list' % group):\n            app.group.create(group)\n        with allure.step('Then the new group list is equal to the old group list with the added group'):\n            new_groups = db.get_group_list()\n            old_groups.append(group)\n>           assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE           assert [81:::, 82:na...@, 86:::, ...] == [81:::, 82:na...@, 86:::, ...]\nE             Left contains one more item: None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J\nE             Use -v to get more diff\n\ntest\\test_add_group.py:16: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"stop","time":{"start":1681772578033,"stop":1681772578034,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"db","time":{"start":1681772578034,"stop":1681772578045,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"app","time":{"start":1681772587590,"stop":1681772587639,"duration":49},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"check_ui","time":{"start":1681772587639,"stop":1681772587639,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert [81:::, 82:na...@, 86:::, ...] == [81:::, 82:na...@, 86:::, ...]\n  Left contains one more item: None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J\n  Use -v to get more diff","statusTrace":"app = <fixture.application.Application object at 0x00000216C1CD6D10>\ndb = <fixture.db.DbFixture object at 0x00000216C1CD6E60>\njson_groups = None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J, check_ui = False\n\n    def test_add_group(app, db, json_groups, check_ui):\n        group = json_groups\n        with allure.step('Given a group list'):\n            old_groups = db.get_group_list()\n        with allure.step('When I add a group %s to the list' % group):\n            app.group.create(group)\n        with allure.step('Then the new group list is equal to the old group list with the added group'):\n            new_groups = db.get_group_list()\n            old_groups.append(group)\n>           assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\nE           assert [81:::, 82:na...@, 86:::, ...] == [81:::, 82:na...@, 86:::, ...]\nE             Left contains one more item: None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J\nE             Use -v to get more diff\n\ntest\\test_add_group.py:16: AssertionError","steps":[{"name":"Given a group list","time":{"start":1681772587641,"stop":1681772587642,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"When I add a group None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J to the list","time":{"start":1681772587642,"stop":1681772588792,"duration":1150},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"Then the new group list is equal to the old group list with the added group","time":{"start":1681772588792,"stop":1681772588817,"duration":25},"status":"failed","statusMessage":"AssertionError: assert [81:::, 82:na...@, 86:::, ...] == [81:::, 82:na...@, 86:::, ...]\n  Left contains one more item: None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J\n  Use -v to get more diff\n","statusTrace":"  File \"C:\\Users\\Ulyana\\PycharmProjects\\training_PythonQA\\test\\test_add_group.py\", line 16, in test_add_group\n    assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)\n","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":0}],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true,"stepsCount":3},"afterStages":[{"name":"db::fin","time":{"start":1681772625974,"stop":1681772625975,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0},{"name":"stop::fin","time":{"start":1681772625976,"stop":1681772628532,"duration":2556},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false,"stepsCount":0}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_add_group"},{"name":"host","value":"LAPTOP-Q68PQPK9"},{"name":"thread","value":"356688-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_add_group"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"json_groups","value":"None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"c01d2a5bf1a49ca7.json","parameterValues":["None:namej\"A]*%:header@27![x:footer},n4&a}ofZO'  J"]}